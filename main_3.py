from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
# from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

api = ""
bot = Bot(token=api)
dp = Dispatcher(bot, storage=MemoryStorage())


class UserInfo(StatesGroup):
    age = State()
    weight = State()
    height = State()
    gender = State()


menu = InlineKeyboardMarkup()
menu.add(InlineKeyboardButton('1. –†–∞—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏', callback_data='calculate'),
         InlineKeyboardButton('2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', callback_data='info'),
         InlineKeyboardButton('3. üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

gender_b = InlineKeyboardMarkup()
gender_b.add(InlineKeyboardButton('1. –ú—É–∂—Å–∫–æ–π', callback_data='male'),
              InlineKeyboardButton('2. –ñ–µ–Ω—Å–∫–∏–π', callback_data='female'),
              InlineKeyboardButton('3. üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))

main_b = InlineKeyboardMarkup()
main_b.add(InlineKeyboardButton('üîô 3. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu'))




# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def process_calculation_from_message(message: types.Message):
    await message.answer('–•–æ—Ä–æ—à–æ. –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ', reply_markup=main_b)
    await UserInfo.age.set()


async def process_info_from_message(message: types.Message):
    await message.answer('–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞.')
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)


async def go_to_main_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu)


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å: ', reply_markup=menu)


@dp.callback_query_handler(lambda c: c.data == "info")
async def process_info(call: types.CallbackQuery):
    await call.answer('–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–≤–æ—é —Å—É—Ç–æ—á–Ω—É—é –Ω–æ—Ä–º—É –∫–∞–ª–æ—Ä–∏–π –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ú–∏—Ñ—Ñ–ª–∏–Ω–∞-–°–∞–Ω –ñ–µ–æ—Ä–∞.')
    await call.message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu)


@dp.callback_query_handler(lambda c: c.data == "calculate")
async def process_calculation(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer('–•–æ—Ä–æ—à–æ. –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: ', reply_markup=main_b)
    await UserInfo.age.set()


@dp.callback_query_handler(lambda c: c.data == "main_menu", state='*')
async def process_main_menu(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    await go_to_main_menu(call.message)
    await state.finish()


@dp.message_handler(state=UserInfo.age)
async def process_age(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–º–µ–Ω—é", "3"]:
        await go_to_main_menu(message)
        await state.finish()
        return

    if not message.text.isdigit():
        await message.answer('–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç(—á–∏—Å–ª–æ)')
        return

    await state.update_data(age=int(message.text))
    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–µ—Å (–≤ –∫–≥)", reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton('3. üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')))
    await UserInfo.weight.set()


@dp.message_handler(state=UserInfo.weight)
async def process_weight(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–º–µ–Ω—é", "3"]:
        await go_to_main_menu(message)
        await state.finish()
        return

    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
        return

    await state.update_data(weight=int(message.text))
    await message.answer("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π —Ä–æ—Å—Ç (–≤ —Å–º).", reply_markup=InlineKeyboardMarkup().add(
        InlineKeyboardButton('3. üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')))
    await UserInfo.height.set()


@dp.message_handler(state=UserInfo.height)
async def process_height(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–º–µ–Ω—é", "3"]:
        await go_to_main_menu(message)
        await state.finish()
        return

    if not message.text.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ).")
        return

    await state.update_data(height=int(message.text))
    await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_b)
    await UserInfo.gender.set()


@dp.callback_query_handler(lambda c: c.data in ["male", "female"], state=UserInfo.gender)
async def process_gender(call: types.CallbackQuery, state: UserInfo.gender):
    gender = call.data.lower()
    if gender == 'male':
        gender_text = '–ú—É–∂—Å–∫–æ–π'
    else:
        gender_text = '–ñ–µ–Ω—Å–∫–∏–π'

    user_data = await state.get_data()
    age = user_data['age']
    weight = user_data['weight']
    height = user_data['height']

    if gender == "male":
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    await call.message.answer(f"–¢–≤–æ–π –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –º–µ—Ç–∞–±–æ–ª–∏–∑–º–∞ (BMR): {bmr:.2f} –∫–∫–∞–ª/–¥–µ–Ω—å.\n"
                              f"–ü–æ–ª: {gender_text}\n"
                              "–≠—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–ª–æ—Ä–∏–π, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –æ—Ä–≥–∞–Ω–∏–∑–º—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–∫–æ—è.",
                              reply_markup=menu)

    await state.finish()


@dp.message_handler(lambda message: message.text in ["1", "2", "1. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏", "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "3", '–º–µ–Ω—é'])
async def handle_button(message: types.Message):
    if message.text == "1" or message.text == "1. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–∞–ª–æ—Ä–∏–∏":
        await process_calculation_from_message(message)
    elif message.text == "2" or message.text == "2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
        await process_info_from_message(message)
    elif message.text == "3" or message.text == "–º–µ–Ω—é":
        await go_to_main_menu(message)


@dp.message_handler(commands=['private'])
async def send_private_button(message: types.Message):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –≤ –ª–∏—á–∫—É", url=f"https://t.me/Drunk_teachers_bot")
    )
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –±–æ—Ç –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–±–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", reply_markup=keyboard)
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
